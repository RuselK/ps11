{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface JwtPayload {\n  exp?: number;\n  iat?: number;\n}\n\nexport function middleware(req: NextRequest) {\n  // 1. Only run checks on /dashboard routes\n  if (!req.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.next();\n  }\n\n  // 2. Retrieve the JWT from the cookie\n  const token = req.cookies.get('authtoken')?.value;\n  if (!token) {\n    // No token -> redirect to /login\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  try {\n    // 3. Decode the JWT to get its payload\n    const decoded = jwtDecode<JwtPayload>(token);\n    // Example: check the expiration time\n    if (decoded.exp && Date.now() >= decoded.exp * 1000) {\n      // Token expired\n      return NextResponse.redirect(new URL('/login', req.url));\n    }\n\n    // 4. Token is valid for now -> proceed\n    return NextResponse.next();\n  } catch (error) {\n    // If decoding fails (malformed token, etc.)\n    console.error('JWT decode error:', error);\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n}\n\n// 5. Apply this middleware only to the /dashboard routes\nexport const config = {\n  matcher: ['/dashboard/:path*'],\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AASO,SAAS,WAAW,GAAgB;IACzC,0CAA0C;IAC1C,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe;QAClD,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,sCAAsC;IACtC,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;IAC5C,IAAI,CAAC,OAAO;QACV,iCAAiC;QACjC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;IAEA,IAAI;QACF,uCAAuC;QACvC,MAAM,UAAU,CAAA,GAAA,sJAAA,CAAA,YAAS,AAAD,EAAc;QACtC,qCAAqC;QACrC,IAAI,QAAQ,GAAG,IAAI,KAAK,GAAG,MAAM,QAAQ,GAAG,GAAG,MAAM;YACnD,gBAAgB;YAChB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;QAEA,uCAAuC;QACvC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,4CAA4C;QAC5C,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}