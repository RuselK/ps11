{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/ruslan/Documents/ps11/frontend/services/apiClient.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\nconst baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n\nconst apiClient: AxiosInstance = axios.create({\n  baseURL,\n  withCredentials: true,\n});\n\nexport default apiClient;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;AAEnD,MAAM,YAA2B,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC5C;IACA,iBAAiB;AACnB;uCAEe"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/ruslan/Documents/ps11/frontend/app/dashboard/page.tsx"],"sourcesContent":["import { GetServerSideProps } from 'next';\nimport React from 'react';\nimport apiClient from '@/services/apiClient';  // your configured Axios instance\n\ninterface User {\n  id: string;\n  email: string;\n  // ...whatever else you return from /api/users/me\n}\n\ninterface DashboardProps {\n  user: User;\n}\n\nexport default function Dashboard({ user }: DashboardProps) {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <p>Welcome, {user.email}!</p>\n      {/* Your protected content goes here */}\n    </div>\n  );\n}\n\n// Check authentication on the server side\nexport const getServerSideProps: GetServerSideProps<DashboardProps> = async (context) => {\n  try {\n    // Grab the user's cookies from the request headers\n    const cookie = context.req ? context.req.headers.cookie : null;\n\n    // Make a server-side request to fetch the current user (/api/users/me)\n    // The Cookie header must be forwarded so your FastAPI can validate the session or token\n    const response = await apiClient.get('/api/users/me', {\n      headers: {\n        Cookie: cookie || '',\n      },\n    });\n\n    // If successful, user is authenticated. Pass user data to the page props.\n    return {\n      props: {\n        user: response.data,\n      },\n    };\n  } catch (error: any) {\n    // If we get an error (likely a 401), redirect to the login page\n    return {\n      redirect: {\n        destination: '/login', // Or wherever your login page is\n        permanent: false,\n      },\n    };\n  }\n};\n"],"names":[],"mappings":";;;;;AAEA,4MAA+C,iCAAiC;;;AAYjE,SAAS,UAAU,EAAE,IAAI,EAAkB;IACxD,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;;oBAAE;oBAAU,KAAK,KAAK;oBAAC;;;;;;;;;;;;;AAI9B;AAGO,MAAM,qBAAyD,OAAO;IAC3E,IAAI;QACF,mDAAmD;QACnD,MAAM,SAAS,QAAQ,GAAG,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG;QAE1D,uEAAuE;QACvE,wFAAwF;QACxF,MAAM,WAAW,MAAM,qHAAA,CAAA,UAAS,CAAC,GAAG,CAAC,iBAAiB;YACpD,SAAS;gBACP,QAAQ,UAAU;YACpB;QACF;QAEA,0EAA0E;QAC1E,OAAO;YACL,OAAO;gBACL,MAAM,SAAS,IAAI;YACrB;QACF;IACF,EAAE,OAAO,OAAY;QACnB,gEAAgE;QAChE,OAAO;YACL,UAAU;gBACR,aAAa;gBACb,WAAW;YACb;QACF;IACF;AACF"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}