{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/ruslan/Documents/ps11/frontend/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/ruslan/Documents/ps11/frontend/services/postService.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\nimport apiClient from './apiClient';\n\n\n/**\n * Shape for creating a post (POST /api/posts/).\n * Matches the OpenAPI schema PostCreate.\n */\nexport interface PostCreate {\n  title: string;\n  content: string;\n  is_published: boolean;\n}\n\n/**\n * Shape for updating a post (PUT /api/posts/{post_id}).\n * Matches the OpenAPI schema PostUpdate.\n */\nexport interface PostUpdate {\n  title: string;\n  content: string;\n  is_published: boolean;\n}\n\n/**\n * Shape of a Post object returned by the API.\n * Matches the OpenAPI schema PostRead.\n */\nexport interface PostRead {\n  id: number;\n  title: string;\n  slug: string;\n  content: string;\n  is_published: boolean;\n  created_at: string; // date-time\n  updated_at: string; // date-time\n}\n\n/**\n * Page type returned by GET /api/posts/ (paginated list).\n * Matches Page_TypeVar_Customized_PostRead_ in the OpenAPI spec.\n */\nexport interface PaginatedPosts {\n  items: PostRead[];\n  total: number | null;\n  page: number | null;\n  size: number | null;\n  pages: number | null;\n}\n\n\n/**\n * Shape for post statistics (GET /api/posts/statistics).\n * Matches the OpenAPI schema PostStatistics.\n */\nexport interface PostStatistics {\n  total_posts: number;\n  total_published_posts: number;\n  total_draft_posts: number;\n}\n\n\n/**\n * Fetch a paginated list of posts.\n * GET /api/posts/?pageNumber=&pageSize=\n */\nexport async function getPosts(\n  pageNumber = 1,\n  pageSize = 10\n): Promise<AxiosResponse<PaginatedPosts>> {\n  return apiClient.get<PaginatedPosts>('/api/posts/', {\n    params: { pageNumber, pageSize },\n  });\n}\n\n/**\n * Fetch a single post by its slug.\n * GET /api/posts/{slug}\n */\nexport async function getPostBySlug(slug: string): Promise<AxiosResponse<PostRead>> {\n  return apiClient.get<PostRead>(`/api/posts/${encodeURIComponent(slug)}`);\n}\n\n/**\n * Create a new post.\n * POST /api/posts/\n */\nexport async function createPost(\n  postData: PostCreate\n): Promise<AxiosResponse<PostRead>> {\n  return apiClient.post<PostRead>('/api/posts/', postData);\n}\n\n/**\n * Update an existing post by ID.\n * PUT /api/posts/{post_id}\n */\nexport async function updatePost(\n  postId: number,\n  postData: PostUpdate\n): Promise<AxiosResponse<PostRead>> {\n  return apiClient.put<PostRead>(`/api/posts/${postId}`, postData);\n}\n\n/**\n * Delete a post by ID.\n * DELETE /api/posts/{post_id}\n */\nexport async function deletePost(postId: number): Promise<AxiosResponse<void>> {\n  return apiClient.delete<void>(`/api/posts/${postId}`);\n}\n\n/**\n * Get post statistics.\n * GET /api/posts/statistics\n */\nexport async function getPostStatistics(): Promise<AxiosResponse<PostStatistics>> {\n  return apiClient.get<PostStatistics>('/api/posts/statistics');\n}\n"],"names":[],"mappings":";;;;;;;;AACA;;AAiEO,eAAe,SACpB,aAAa,CAAC,EACd,WAAW,EAAE;IAEb,OAAO,qHAAA,CAAA,UAAS,CAAC,GAAG,CAAiB,eAAe;QAClD,QAAQ;YAAE;YAAY;QAAS;IACjC;AACF;AAMO,eAAe,cAAc,IAAY;IAC9C,OAAO,qHAAA,CAAA,UAAS,CAAC,GAAG,CAAW,CAAC,WAAW,EAAE,mBAAmB,OAAO;AACzE;AAMO,eAAe,WACpB,QAAoB;IAEpB,OAAO,qHAAA,CAAA,UAAS,CAAC,IAAI,CAAW,eAAe;AACjD;AAMO,eAAe,WACpB,MAAc,EACd,QAAoB;IAEpB,OAAO,qHAAA,CAAA,UAAS,CAAC,GAAG,CAAW,CAAC,WAAW,EAAE,QAAQ,EAAE;AACzD;AAMO,eAAe,WAAW,MAAc;IAC7C,OAAO,qHAAA,CAAA,UAAS,CAAC,MAAM,CAAO,CAAC,WAAW,EAAE,QAAQ;AACtD;AAMO,eAAe;IACpB,OAAO,qHAAA,CAAA,UAAS,CAAC,GAAG,CAAiB;AACvC"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/ruslan/Documents/ps11/frontend/app/dashboard/page.tsx"],"sourcesContent":["\"use client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { getPostStatistics, PostStatistics } from \"@/services/postService\"\nimport { useEffect, useState } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function DashboardPage() {\n  const [statistics, setStatistics] = useState<PostStatistics | null>(null)\n\n  useEffect(() => {\n    getPostStatistics().then((response) => {\n      setStatistics(response.data)\n    })\n  }, [])\n\n  return (\n    <div>\n      <h1 className=\"text-2xl md:text-3xl font-bold mb-6\">Обзор</h1>\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Всего постов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {statistics ? (\n              <p className=\"text-2xl md:text-3xl font-bold\">{statistics.total_posts}</p>\n            ) : (\n              <Skeleton className=\"h-10 w-20\" />\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Опубликовано постов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {statistics ? (\n              <p className=\"text-2xl md:text-3xl font-bold\">{statistics.total_published_posts}</p>\n            ) : (\n              <Skeleton className=\"h-10 w-20\" />\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Черновики</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {statistics ? (\n              <p className=\"text-2xl md:text-3xl font-bold\">{statistics.total_draft_posts}</p>\n            ) : (\n              <Skeleton className=\"h-10 w-20\" />\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;;;AAHA;;;;;;AAMe,SAAS;IACtB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAyB;IAEpE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD,IAAI,IAAI,CAAC,CAAC;YACxB,cAAc,SAAS,IAAI;QAC7B;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC;;0BACC,8OAAC;gBAAG,WAAU;0BAAsC;;;;;;0BACpD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,yHAAA,CAAA,OAAI;;0CACH,8OAAC,yHAAA,CAAA,aAAU;0CACT,cAAA,8OAAC,yHAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEb,8OAAC,yHAAA,CAAA,cAAW;0CACT,2BACC,8OAAC;oCAAE,WAAU;8CAAkC,WAAW,WAAW;;;;;yDAErE,8OAAC;oCAAS,WAAU;;;;;;;;;;;;;;;;;kCAI1B,8OAAC,yHAAA,CAAA,OAAI;;0CACH,8OAAC,yHAAA,CAAA,aAAU;0CACT,cAAA,8OAAC,yHAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEb,8OAAC,yHAAA,CAAA,cAAW;0CACT,2BACC,8OAAC;oCAAE,WAAU;8CAAkC,WAAW,qBAAqB;;;;;yDAE/E,8OAAC;oCAAS,WAAU;;;;;;;;;;;;;;;;;kCAI1B,8OAAC,yHAAA,CAAA,OAAI;;0CACH,8OAAC,yHAAA,CAAA,aAAU;0CACT,cAAA,8OAAC,yHAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEb,8OAAC,yHAAA,CAAA,cAAW;0CACT,2BACC,8OAAC;oCAAE,WAAU;8CAAkC,WAAW,iBAAiB;;;;;yDAE3E,8OAAC;oCAAS,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOlC"}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}